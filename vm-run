#!/bin/bash -efu
# SPDX-License-Identifier: GPL-2.0
#
# vm-run: Run command under QEMU emulated root
#
# Copyright (C) 2019 Vitaly Chikunov <vt@altlinux.org>
#

SCRIPT=$(mktemp)
export > $SCRIPT

# Additional options to qemu run
OPTS=
APPEND=
NOCMD=
TIME=time
SBIN=

usage() {
	echo "Usage: $0 [options] command..."
	echo "Options:"
	echo "    -h|--help        this help"
	echo "    -s|--silent      do not show qemu command"
	echo "    --sbin           append sbin dirs to the PATH"
	echo "    --udevd          start udevd"
	echo "    --qemu='...'     pass additional options to qemu"
	echo "    --append='...'   append to kernel cmdline"
	echo "    --drive=         shortcut to pass '-drive file=' to qemu"
	echo "    --overlay=fs[,size=][:path]"
	echo "                     auto create overlay filesystem over path"
	echo "    --               no options after this marker"
	echo "    command...       will be eval'ed on the target"
	exit 1
}

for opt do
	shift
	case "$opt" in
		-h|--help)   usage ;;
		-s|--silent) NOCMD=y TIME= ;;
		--sbin)      SBIN=y ;;
		--udevd)     APPEND+=" UDEVD=y" ;;
		--qemu=*)    OPTS+=" ${opt#*=}" ;;
		--append=*)  APPEND+=" ${opt#*=}" ;;
		--drive=*)   OPTS+=" -drive file=${opt#*=}" ;;
		--overlay=*) APPEND+=" OVERLAY=${opt#*=}" ;;
		--) break ;;
		-*) echo "Unknown option $opt $*"; usage ;;
		*)  set -- "$opt" "$@"; break ;;
	esac
done

# If no command run shell
if [ -z "$*" ]; then
	set bash
	SBIN=y
fi

# Prepare env
[ $SBIN ] && echo "PATH=/sbin:/usr/sbin:\$PATH" >> $SCRIPT
# Because 9p cannot handle redirection from deleted files and as
# a consequence cannot handle here-documents move TMPDIR to tmpfs
printf "TMPDIR=/tmp\n" >> $SCRIPT
printf "cd %q\n" "$PWD" >> $SCRIPT
printf "eval" >> $SCRIPT
printf  " %q" "$@" >> $SCRIPT
printf  "\n" >> $SCRIPT
chmod a+rx $SCRIPT

case "$HOSTTYPE" in
	powerpc64le)
		PACKAGE=qemu-system-ppc-core
		CONSOLE=hvc0
		QEMU=qemu-system-ppc64
		;;
	aarch64)
		PACKAGE=qemu-system-aarch64-core
		CONSOLE=ttyAMA0
		QEMU=qemu-system-aarch64
		OPTS+=" -machine virt -cpu max"
		;;
	i586|x86_64)
		PACKAGE=qemu-system-x86-core
		CONSOLE=ttyS0
		# On x86 qemu is symlink to qemu-kvm
		QEMU=qemu
		;;
	*)
		echo "Error: architecture $HOSTTYPE is unknown"
		exit 1
esac

# Quirks
if [ -e /usr/share/qemu/bios.bin ]; then
	# x86 BIOS that doesn't clear screen unlike default bios-256k.bin
	OPTS+=" -bios bios.bin"
fi

# If KVM is accessible use it.
if [ -w /dev/kvm ]; then
	# Fallback to TCG in case of something.
	OPTS+=" -machine accel=kvm:tcg"
elif [ "$QEMU" = qemu ]; then
	# Required on `qemu-kvm'.
	OPTS+=" -no-kvm"
fi

if ! mountpoint -q /proc; then
	echo "====================================="
	echo "=   Warning: /proc is not mounted   ="
	echo "=            failures may occur!    ="
	echo "====================================="
fi

(
 set +f # Enable filename globbing
 test "$NOCMD" || set -x
 $TIME \
 $QEMU \
	-m 256M \
	$OPTS \
	-nodefaults \
	-nographic \
	-no-reboot \
	-fsdev local,id=root,path=/,security_model=none \
	-device virtio-9p-pci,fsdev=root,mount_tag=/dev/root \
	-serial mon:stdio \
	-kernel /boot/vmlinuz-* \
	-initrd /boot/initrd-* \
	-append "console=$CONSOLE mitigations=off nokaslr quiet panic=-1 SCRIPT=$SCRIPT$APPEND"
)

# Temporary script is not deleted intentionally.
if [ -s $SCRIPT.ret ]; then
	read ret < $SCRIPT.ret
	exit $ret
else
	echo "Error: no exit code is found, failure."
	exit 1
fi
