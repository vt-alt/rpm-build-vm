#!/bin/bash -efu
# SPDX-License-Identifier: GPL-2.0
#
# vm-run: Run command under QEMU emulated root
#
# Copyright (C) 2019 Vitaly Chikunov <vt@altlinux.org>
#

# Save original env first
SCRIPT=$(mktemp)
( LOGNAME=root
  USER=root
  declare -fx
  export ) > $SCRIPT

# Additional options to qemu run
OPTS=
APPEND=
NOCMD=
TIME=time
SBIN=
VERBOSE=
QUIET=quiet	# no boot messages
DEF=
MAXMEM=
MAXCPU=

usage() {
	echo "Usage: $0 [options] command..."
	echo "Options:"
	echo "    -h|--help        this help"
	echo "    -s|--silent      do not show qemu command"
	echo "    --verbose        show vm actions verbosely"
	echo "    --no-quiet       do not boot kernel too quietly"
	echo "    --sbin           append sbin dirs to the PATH"
	echo "    --udevd          start udevd"
	echo "    --qemu='...'     pass additional options to qemu"
	echo "    --append='...'   append to kernel cmdline"
	echo "    --drive=         shortcut to pass '-drive file=' to qemu"
	echo "    --overlay=fs[,size=][:path]"
	echo "                     auto create overlay filesystem over path"
	echo "    --mem=           pass '-m ...' to qemu (memory size)"
	echo "    --cpu=           pass '-smp ...' to qemu (cpus)"
	echo "    --kernel=        kernel vesion to use"
	echo "    --               no options after this marker"
	echo "    command...       will be eval'ed on the target"
	exit 1
}

for opt do
	shift
	case "$opt" in
		-h|--help)   usage ;;
		-s|--silent) NOCMD=y TIME= ;;
		--verbose)   VERBOSE=1 APPEND+=" VERBOSE" ;;
		--no-quiet)  QUIET= ;;
		--sbin)      SBIN=y ;;
		--udevd)     APPEND+=" UDEVD=y" ;;
		--qemu=*)    OPTS+=" ${opt#*=}" ;;
		--append=*)  APPEND+=" ${opt#*=}" ;;
		--drive=*)   OPTS+=" -drive file=${opt#*=}" ;;
		--overlay=*) APPEND+=" OVERLAY=${opt#*=}" ;;
		--mem=*)     OPTS+=" -m ${opt#*=}" ;;
		--cpu=*)     OPTS+=" -smp ${opt#*=}" ;;
		--kernel=*)  KERNEL="${opt#*=}" ;;
		--) break ;;
		-*) echo "Unknown option $opt $*"; usage ;;
		*)  set -- "$opt" "$@"; break ;;
	esac
done

# If no command run shell
if [ -z "$*" ]; then
	set bash
	SBIN=y
fi

# If we already have root just run the command
if [ $(whoami) = root ]; then
	exec "$@"
	exit 1
fi

# Signal to vm-init that we don't have tty on stdin,
# so it will not try to determine terminal size
if [ ! -t 0 ]; then
	APPEND+=" NOTTY"
fi

# Prepare env
[ $SBIN ] && echo "PATH=/sbin:/usr/sbin:\$PATH" >> $SCRIPT
printf "cd %q\n" "$PWD" >> $SCRIPT
printf "eval" >> $SCRIPT
printf  " %q" "$@" >> $SCRIPT
printf  "\n" >> $SCRIPT
chmod a+rx $SCRIPT

ppc_opts() {
	# Use `power8' and not `host', because we will transparently
	# fallback from kvm to tcg. All following options will not
	# break fallback to tcg.
	echo -n " -M cap-ibs=broken,cap-cfpc=broken,cap-sbbc=broken"
	echo -n " -cpu power8"
	if [ -w /dev/kvm ]; then
		# In absence of `/usr/sbin/ppc64_cpu' determine SMT by presence
		# online cores 1-7, (while cores 0,8,.. is not SMT cores.)
		if grep -q -P '^processor\s+:\s[1234567]$' /proc/cpuinfo; then
			# If SMT enabled use slower PR (problem state) KVM.
			echo " -M kvm-type=PR"
		else
			# KVM HV is faster, but incompatible with SMT.
			echo " -M kvm-type=HV"
		fi
	else
		# KVM doesn't support this.
		echo -n ",compat=power7"
	fi
}

case "$HOSTTYPE" in
	powerpc64le)
		PACKAGE=qemu-system-ppc-core
		CONSOLE=hvc0
		QEMU=qemu-system-ppc64
		OPTS+=$(ppc_opts)
		# Avoid `CPU time limit exceeded'
		MAXMEM=32768
		MAXCPU=8
		;;
	aarch64)
		PACKAGE=qemu-system-aarch64-core
		CONSOLE=ttyAMA0
		QEMU=qemu-system-aarch64
		# Values that can work well both for kvm and tcg
		OPTS+=" -M virt,gic-version=3 -cpu max"
		# More cpu and memory is slower launch, so limit them
		# to sane big values
		MAXMEM=4096
		MAXCPU=8
		;;
	i586)
		PACKAGE=qemu-system-x86-core
		CONSOLE=ttyS0
		QEMU=qemu-system-i386
		MAXMEM=1536
		;;
	x86_64)
		PACKAGE=qemu-system-x86-core
		CONSOLE=ttyS0
		QEMU=qemu-system-x86_64
		;;
	*)
		echo "Error: architecture $HOSTTYPE is unknown"
		exit 1
esac

# Quirks
if [ -e /usr/share/qemu/bios.bin ]; then
	# x86 BIOS that doesn't clear screen unlike default bios-256k.bin
	OPTS+=" -bios bios.bin"
fi

# If KVM is accessible use it.
if [ -w /dev/kvm ]; then
	# Fallback to TCG in case of something.
	OPTS+=" -M accel=kvm:tcg"
fi

if ! mountpoint -q /proc; then
	echo "==========================================="
	echo "Warning: /proc is not mounted              "
	echo "try: hsh-shell --mountpoints=/proc,/dev/kvm"
	echo "==========================================="
fi

if [ -e /proc/meminfo ]; then
        M=$(grep MemAvailable: /proc/meminfo)
        M=${M##MemAvailable: }
        M=${M%% kB}
        M=$(($M / 1024))
	if [ "$MAXMEM" ] && [ "$M" -gt "$MAXMEM" ]; then
		M=$MAXMEM
	fi
else
        M=256

fi
# Round to 256M for ppc
[ "$HOSTTYPE" = powerpc64le ] && M=$((M / 256 * 256))
if [ $M -ge 256 ]; then
        DEF+=" -m ${M}M"
fi

NPROC=$(nproc)
if [ "$NPROC" -gt 1 ]; then
	if [ "$MAXCPU" ] && [ "$NPROC" -gt "$MAXCPU" ]; then
		NPROC=$MAXCPU
	fi
	DEF+=" -smp $NPROC"
fi

if [ -e /proc/net/dev ] && [ $(wc -l < /proc/net/dev) -gt 3 ]; then
	DEF+=" -nic user,model=virtio-net-pci"
	if type ip >/dev/null 2>&1; then
		:
	elif type ifconfig >/dev/null 2>&1; then
		:
	else
		echo "Warning: To use share_network inside vm-run you may"
		echo "  need to hsh-install iproute2 or net-tools"
	fi
fi

if [ "${KERNEL-}" ]; then
	# Kernel version can be exact or match like std-def
	if [ -e "$KERNEL" ]; then
		INITRD=${KERNEL/vmlinuz/initrd}
		INITRD=${INITRD%.img}.img
	else
		KERNEL=${KERNEL#/boot/}
		KERNEL=${KERNEL#initrd-}
		KERNEL=${KERNEL#vmlinuz-}
		KERNEL=${KERNEL%.img}
		if [ -e /boot/initrd-"$KERNEL".img ]; then
			INITRD=/boot/initrd-"$KERNEL".img
		else
			INITRD=$(set +f; ls -ct /boot/initrd-* | fgrep -e "$KERNEL")
		fi
	fi
elif [ -z "${INITRD-}" ]; then
	# Find newest initrd
	INITRD=$(set +f; ls -ct /boot/initrd-* | head -1)
fi
KERNEL=${INITRD/initrd/vmlinuz}
KERNEL=${KERNEL%.img}

# -serial mon:stdio  to make ^C not break qemu
# -device virtio-rng-pci  for virtio-rng
(
 set +f # Enable filename globbing
 test "$NOCMD" || set -x
 $TIME \
 $QEMU \
	$DEF \
	-nodefaults \
	-nographic \
	-no-reboot \
	-fsdev local,id=root,path=/,security_model=none,multidevs=remap \
	-device virtio-9p-pci,fsdev=root,mount_tag=/dev/root \
	-device virtio-rng-pci \
	-serial mon:stdio \
	-kernel $KERNEL \
	-initrd $INITRD \
	$OPTS \
	-append "console=$CONSOLE mitigations=off nokaslr $QUIET panic=-1 SCRIPT=$SCRIPT$APPEND"
)

# Temporary script is not deleted intentionally.
if [ -s $SCRIPT.ret ]; then
	read ret < $SCRIPT.ret
	exit $ret
else
	echo "Error: no exit code is found, failure."
	exit 1
fi
